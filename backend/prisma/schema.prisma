generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int                 @id @default(autoincrement())
  first_name      String?             @db.VarChar(255)
  last_name       String?             @db.VarChar(255)
  email           String              @unique @db.VarChar(255)
  bio             String?
  created_at      DateTime            @default(now())
  supabase_id     String              @unique @db.VarChar(255)
  updated_at      DateTime            @updatedAt
  comments        Comment[]
  favorites       Favorite[]
  messages        Message[]
  notifications   Notification[]
  shelf_items     ShelfItem[]
  category_scores UserCategoryScore[]
  joined_channels UserChannel[]
  num_followers   Int                 @default(0)
  num_following   Int                 @default(0)
  followers       UserFollows[]       @relation("UserFollowers")
  following       UserFollows[]       @relation("UserFollowing")
  celebrity_weight Float              @default(1.0)
}

model Favorite {
  id         Int      @id @default(autoincrement())
  user_id    Int
  book_id    String   @db.VarChar(255)
  book_title String   @db.VarChar(500)
  book_data  Json?
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, book_id])
}

model ShelfItem {
  id         Int      @id @default(autoincrement())
  user_id    Int
  book_id    String   @db.VarChar(255)
  book_title String   @db.VarChar(500)
  book_data  Json?
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, book_id])
}

model Channel {
  id            String         @id @default(uuid())
  name          String         @db.VarChar(255)
  book_id       String         @db.VarChar(255)
  book_title    String         @db.VarChar(500)
  book_data     Json?
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  messages      Message[]
  notifications Notification[]
  members       UserChannel[]
}

model UserChannel {
  id         Int      @id @default(autoincrement())
  user_id    Int
  channel_id String
  joined_at  DateTime @default(now())
  channel    Channel  @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, channel_id])
}

model Message {
  id            String         @id @default(uuid())
  content       String
  createdAt     DateTime       @default(now())
  userId        Int
  channelId     String
  parentId      String?
  channel       Channel        @relation(fields: [channelId], references: [id])
  parent        Message?       @relation("MessageReplies", fields: [parentId], references: [id])
  replies       Message[]      @relation("MessageReplies")
  user          User           @relation(fields: [userId], references: [id])
  notifications Notification[]
}

model Comment {
  id         String    @id @default(uuid())
  content    String
  book_id    String    @db.VarChar(255)
  book_title String    @db.VarChar(500)
  book_data  Json?
  createdAt  DateTime  @default(now())
  userId     Int
  parentId   String?
  parent     Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[] @relation("CommentReplies")
  user       User      @relation(fields: [userId], references: [id])
}

model UserCategoryScore {
  id         Int      @id @default(autoincrement())
  user_id    Int
  category   String   @db.VarChar(255)
  score      Float    @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, category])
}

model Notification {
  id         String   @id @default(uuid())
  user_id    Int
  channel_id String
  message_id String?
  content    String
  is_read    Boolean  @default(false)
  created_at DateTime @default(now())
  channel    Channel  @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  message    Message? @relation(fields: [message_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model UserFollows {
  id           Int      @id @default(autoincrement())
  follower_id  Int
  following_id Int
  created_at   DateTime @default(now())
  follower     User     @relation("UserFollowers", fields: [follower_id], references: [id], onDelete: Cascade)
  following    User     @relation("UserFollowing", fields: [following_id], references: [id], onDelete: Cascade)

  @@unique([follower_id, following_id])
}
